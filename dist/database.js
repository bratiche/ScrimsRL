"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MySQL = require("mysql");
var con;
function initDB() {
    con = MySQL.createConnection({
        host: "localhost",
        user: "root",
        password: "pokerdeASES007",
        database: "scrimsdb",
    });
    con.connect(err => {
        if (err)
            throw err;
        console.log("Connected to database!");
        let createTeamsTable = `CREATE TABLE IF NOT EXISTS teams(
            teamID INT AUTO_INCREMENT PRIMARY KEY,
            teamName VARCHAR(50) NOT NULL,
            teamTag VARCHAR(6) NOT NULL
        );`;
        let createPlayersTable = `CREATE TABLE IF NOT EXISTS players(
            playerName VARCHAR(30) NOT NULL,
            discordUserID VARCHAR(30),
            captain BOOLEAN DEFAULT false,
            platform ENUM ('steam', 'psn', 'xbox') NOT NULL, 
            id VARCHAR(255) NOT NULL,
            teamID INT NOT NULL,
            FOREIGN KEY team(teamID) REFERENCES teams(teamID)
        );`;
        con.query(createTeamsTable);
        con.query(createPlayersTable);
    });
    setInterval(() => {
        con.query('SELECT 1;');
    }, 1000 * 60 * 60);
}
exports.initDB = initDB;
function addPlayer(player) {
    con.query(`SELECT teamID FROM teams WHERE teamName = "${player.team.name}" AND teamTag = '${player.team.tag}';`, (err, rows) => {
        if (err)
            throw err;
        if (rows.length == 0)
            return console.log("No team found");
        if (rows.length != 1)
            return console.log("Duplicate Teams!");
        let teamID = rows[0].teamID;
        con.query(`INSERT INTO players (playerName, discordUserID, captain, platform, id, teamID) 
        VALUES ("${player.name}", "${player.discordUserID}", ${player.captain}, '${player.platform}', '${player.id}', ${teamID});`);
    });
}
exports.addPlayer = addPlayer;
function removePlayer(discordTag) {
}
function updatePlayer(player) {
}
function getPlayer(playerName, discordUserID) {
    let player = null;
    let query;
    if (discordUserID != undefined) {
        query = `SELECT * FROM players WHERE discordUserID = '${discordUserID}';`;
    }
    else {
        query = `SELECT * FROM players WHERE playerName = "${playerName}";`;
    }
    con.query(query, (err, rows) => {
        if (err)
            throw err;
        if (rows.length == 0)
            return console.log("No player found");
        if (rows.length != 1)
            return console.log("Duplicate players!");
        let teamID = rows[0].teamID;
        let team;
        con.query(`SELECT * FROM teams WHERE teamID = ${teamID};`, (err, teamRows) => {
            if (err)
                throw err;
            if (teamRows.length == 0)
                return console.log("No team found");
            if (teamRows.length != 1)
                return console.log("Duplicate Teams!");
            team.name = teamRows[0].teamName;
            team.tag = teamRows[0].teamTag;
            player = {
                name: rows[0].playerName, discordUserID: rows[0].discordUserID,
                captain: rows[0].captain, platform: rows[0].platform, id: rows[0].id, team: team
            };
        });
    });
    console.log(player);
    return player;
}
exports.getPlayer = getPlayer;
function getPlayersFromTeam(teamTag, callback) {
    let players = [];
    con.query(`SELECT * FROM teams WHERE teamTag = '${teamTag}';`, (err, teams) => {
        if (err)
            throw err;
        if (teams.length === 0)
            return callback([], error.ERROR_TEAM_NOT_ON_DATABASE);
        if (teams.length !== 1)
            return callback([], error.ERROR_DUPLICATE_TEAMS);
        con.query(`SELECT * FROM players WHERE teamID = ${teams[0].teamID};`, (err, rows) => {
            if (err)
                throw err;
            for (let i = 0; i < rows.length; i++) {
                const team = {
                    name: teams[0].teamName,
                    tag: teams[0].teamTag,
                };
                const player = {
                    name: rows[i].playerName, discordUserID: rows[i].discordUserID,
                    captain: rows[i].captain === 1, platform: rows[i].platform, id: rows[i].id, team: team,
                };
                players.push(player);
            }
            return callback(players);
        });
    });
}
exports.getPlayersFromTeam = getPlayersFromTeam;
function addTeam(team) {
    con.query(`INSERT INTO teams (teamName, teamTag) VALUES ("${team.name}", '${team.tag}');`);
}
exports.addTeam = addTeam;
function getTeams(callback) {
    let teams = [];
    con.query(`SELECT * FROM teams;`, (err, rows) => {
        if (err)
            throw err;
        for (let i = 0; i < rows.length; i++) {
            const team = {
                name: rows[0].teamName,
                tag: rows[0].teamTag,
            };
            teams.push(team);
        }
        return callback(teams);
    });
}
exports.getTeams = getTeams;
function removeTeam(tag, name) {
}
function updateTeam(oldTeam, newTeam) {
}
var error;
(function (error) {
    error[error["ERROR_PLAYER_NOT_ON_DATABASE"] = 1] = "ERROR_PLAYER_NOT_ON_DATABASE";
    error[error["ERROR_DUPLICATE_PLAYERS"] = 2] = "ERROR_DUPLICATE_PLAYERS";
    error[error["ERROR_TEAM_NOT_ON_DATABASE"] = 3] = "ERROR_TEAM_NOT_ON_DATABASE";
    error[error["ERROR_DUPLICATE_TEAMS"] = 4] = "ERROR_DUPLICATE_TEAMS";
})(error = exports.error || (exports.error = {}));
function getTeamOf(discordUserID, callback) {
    con.query(`SELECT * FROM players WHERE discordUserID = "${discordUserID}";`, (err, players) => {
        if (err)
            throw err;
        if (players.length === 0)
            return callback(null, error.ERROR_PLAYER_NOT_ON_DATABASE);
        if (players.length !== 1)
            return callback(null, error.ERROR_DUPLICATE_PLAYERS);
        con.query(`SELECT * FROM teams WHERE teamID = ${players[0].teamID};`, (err, teams) => {
            if (err)
                throw err;
            if (teams.length === 0)
                return callback(null, error.ERROR_TEAM_NOT_ON_DATABASE);
            if (teams.length !== 1)
                return callback(null, error.ERROR_DUPLICATE_TEAMS);
            let team = {
                name: teams[0].teamName,
                tag: teams[0].teamTag,
            };
            return callback(team);
        });
    });
}
exports.getTeamOf = getTeamOf;
function getTeamByTag(teamTag, callback) {
    con.query(`SELECT * FROM teams WHERE teamTag = '${teamTag}';`, (err, teams) => {
        if (err)
            throw err;
        if (teams.length === 0)
            return callback(null, error.ERROR_TEAM_NOT_ON_DATABASE);
        if (teams.length !== 1)
            return callback(null, error.ERROR_DUPLICATE_TEAMS);
        ;
        let team = {
            name: teams[0].teamName,
            tag: teams[0].teamTag,
        };
        return callback(team);
    });
}
exports.getTeamByTag = getTeamByTag;
function flush() {
    con.query('DELETE FROM players;');
    con.query('DELETE FROM teams;');
    console.log('Database flushed!');
}
exports.flush = flush;
//# sourceMappingURL=data:application/json;base64,